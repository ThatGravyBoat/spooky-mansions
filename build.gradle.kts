plugins {
    id("java-library")
    id("maven-publish")
    id("idea")
    id("net.neoforged.moddev") version "2.0.110"
}

version = "1"
group = "tech.thatgravyboat"

repositories {
    mavenLocal()
}

base {
    archivesName = "spooky-trinkets"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.properties["neo_version"]!!.toString()

    parchment {
        mappingsVersion = project.properties["parchment_mappings_version"]!!.toString()
        minecraftVersion = project.properties["parchment_minecraft_version"]!!.toString()
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add("src/main/resources/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        create("client") {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty( "neoforge.enabledGameTestNamespaces", project.properties.get("mod_id")!!.toString())
        }


        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        create("${project.properties["mod_id"]}") {
            sourceSet(sourceSets.main.get())
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources { srcDir ("src/generated/resources") }


var generateModMetadata = tasks.register<ProcessResources>("generateModMetadata") {
    var replaceProperties = mapOf(
        "minecraft_version" to project.properties["minecraft_version"]!!.toString(),
        "minecraft_version_range" to project.properties["minecraft_version_range"]!!.toString(),
        "neo_version" to project.properties["neo_version"]!!.toString(),
        "neo_version_range" to project.properties["neo_version_range"]!!.toString(),
        "loader_version_range" to project.properties["loader_version_range"]!!.toString(),
        "mod_id" to project.properties["mod_id"]!!.toString(),
        "mod_name" to project.properties["mod_name"]!!.toString(),
        "mod_license" to project.properties["mod_license"]!!.toString(),
        "mod_version" to project.properties["mod_version"]!!.toString(),
        "mod_authors" to project.properties["mod_authors"]!!.toString(),
        "mod_description" to project.properties["mod_description"]!!.toString(),
    )
    inputs.properties(replaceProperties)
    expand(replaceProperties)
    from("src/main/templates")
    into("build/generated/sources/modMetadata")
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.get().resources.srcDir(generateModMetadata)
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask(generateModMetadata)

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadJavadoc = true
        isDownloadJavadoc = true
    }
}
